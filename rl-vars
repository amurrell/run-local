#!/usr/bin/env bash

PROJECT_NAME="üê£ YOUR PROJECT"

# Relevant Use Case: create_default_file function
DEFAULT_PORT="3000"
DEFAULT_DB_NAME="myprojectdb"
DEFAULT_WEB_SERVER_ROOT="/var/www/site/html"
DEFAULT_PHP_VERSION="8.2"
DEFAULT_UBUNTU_RELEASE_NAME="jammy"
DEFAULT_UBUNTU_VERSION="22.04"
DEFAULT_YAML_VERSION="2.2.3"
DEFAULT_NVM_VERSION="18.17.1"
DEFAULT_DB_IMAGE="mariadb:10.6" # can choose mysql or mariadb

# Where package.json is, relative to the repo. eg. wp-content/themes/yourtheme
DEFAULT_APP_PATH=""

# Unique to your package.json - what's the command to start your app, locally?
DEFAULT_NPM_COMMAND="npm run dev"

# Less likely to need to change for local development - this is default for DockerLocal/env.yml
DEFAULT_DB_PASSWORD="1234"

# Custom MySQL/MariaDB configuration - used in install function
DB_CUSTOM_CONF=$(cat <<EOF
[mysqld]
EOF
)

APP_ENV_FILE="$REPO_ROOT/.env"
APP_ENV_EXAMPLE_FILE="$REPO_ROOT/.env.example"

# Custom DockerFIle settings for NGINX - used in install function
# Pick 1 line to "replace" with your block (that adds it back in). eg. `# Remove pool.d/www.conf` replaced with
# ```
# `Block of stuff
# `Block of stuff
# `
# `# Remove pool.d/www.conf
# ```
# Using this syntax to maintain newlines in the variable
read -r -d '' DOCKERFILE_CUSTOM_CONF <<'EOF'
# change upload_max, post max, memory limit
RUN sed -i "/;upload_max_filesize = .*/c\upload_max_filesize = 20M" /etc/php/PHP_VERSION/fpm/php.ini && \
	sed -i "/upload_max_filesize = .*/c\upload_max_filesize = 20M" /etc/php/PHP_VERSION/fpm/php.ini && \
	sed -i "/;post_max_size = .*/c\post_max_size = 64M" /etc/php/PHP_VERSION/fpm/php.ini && \
	sed -i "/post_max_size = .*/c\post_max_size = 64M" /etc/php/PHP_VERSION/fpm/php.ini && \
	sed -i "/;memory_limit = .*/c\memory_limit = 256M" /etc/php/PHP_VERSION/fpm/php.ini && \
	sed -i "/memory_limit = .*/c\memory_limit = 256M" /etc/php/PHP_VERSION/fpm/php.ini

# Remove pool.d/www.conf
RUN rm /etc/php/PHP_VERSION/fpm/pool.d/www.conf
EOF
DOCKERFILE_REPLACE_LINE="Remove pool.d/www.conf"

# rl-extended and rl-funcs variables

# rl-assets
ASSETS_SSH_SERVER='root@hostname' # to be used with ssh & scp (use ssh config to make this easier)
ASSETS_SSH_SERVER_SOURCE_DIR='/var/www/yourproject.com/wp-content/uploads'
ASSETS_FILE='rl-assets-download'  # we will append a timestamp, tar.gz
ASSETS_LOCAL_PATH="$REPO_ROOT/html/wp-content/uploads"
ASSETS_DOWNLOAD_PATH="$REPO_ROOT/$DATA_DIR/$ASSETS_FILE"

# Export rl-extended variables

export ASSETS_SSH_SERVER
export ASSETS_SSH_SERVER_SOURCE_DIR
export ASSETS_FILE
export ASSETS_LOCAL_PATH
export ASSETS_DOWNLOAD_PATH

# Export all variables

export PROJECT_NAME
export DEFAULT_PORT
export DEFAULT_DB_NAME
export DEFAULT_WEB_SERVER_ROOT
export DEFAULT_PHP_VERSION
export DEFAULT_UBUNTU_RELEASE_NAME
export DEFAULT_UBUNTU_VERSION
export DEFAULT_YAML_VERSION
export DEFAULT_NVM_VERSION
export DEFAULT_DB_IMAGE
export DEFAULT_APP_PATH

export DEFAULT_NPM_COMMAND
export DEFAULT_DB_PASSWORD

export APP_ENV_FILE
export APP_ENV_EXAMPLE_FILE

export DB_CUSTOM_CONF
export DOCKERFILE_CUSTOM_CONF
export DOCKERFILE_REPLACE_LINE

