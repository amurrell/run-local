# Safe-to-templating ARGs
ARG PHP_VERSION=${PHP_VERSION}

FROM dunglas/frankenphp:1.5.0-php${PHP_VERSION}-bookworm

LABEL maintainer="Angela Murrell <me@angelamurrell.com>"

ARG PHP_VERSION=${PHP_VERSION}
ARG NVM_VERSION=${NVM_VERSION}
ARG LOGS_FOLDER=${LOGS_FOLDER}
ARG SITE_PATH=${SITE_PATH}

ENV APP_ENV=local
ENV DEBIAN_FRONTEND=noninteractive
ENV TERM=xterm
ENV REDIS_URL=redis://redis

# System dependencies + curl + git (needed for NVM)
RUN apt-get update && apt-get install -y --no-install-recommends \
  unzip sudo nano curl git build-essential \
  libzip-dev libicu-dev libonig-dev \
  libjpeg-dev libpng-dev libwebp-dev libfreetype6-dev \
  gnupg libyaml-dev \
  && rm -rf /var/lib/apt/lists/*

# Install PHP extensions
RUN set -eux; \
  install-php-extensions \
  @composer \
  bcmath \
  pcntl \
  ctype \
  curl \
  pdo_mysql \
  dom \
  fileinfo \
  json \
  mbstring \
  openssl \
  pcre \
  pdo_pgsql \
  pgsql \
  tokenizer \
  xml \
  intl \
  zip \
  redis \
  gd \
  yaml \
  xdebug \
  opcache

# https://getcomposer.org/doc/03-cli.md#composer-allow-superuser
ENV COMPOSER_ALLOW_SUPERUSER=1

# Add www-data to the sudoers file with no password requirement
RUN echo "www-data ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Setup NVM + install Node + PM2
ENV NVM_DIR=/usr/local/nvm
ENV NODE_VERSION=${NVM_VERSION}
RUN mkdir -p $NVM_DIR && \
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash && \
  . "$NVM_DIR/nvm.sh" && \
  nvm install $NODE_VERSION && \
  nvm use $NODE_VERSION && \
  nvm alias default $NODE_VERSION && \
  npm install -g pm2 && \
  ln -s "$NVM_DIR/versions/node/$NODE_VERSION/bin/node" /usr/local/bin/node && \
  ln -s "$NVM_DIR/versions/node/$NODE_VERSION/bin/npm" /usr/local/bin/npm && \
  ln -s "$NVM_DIR/versions/node/$NODE_VERSION/bin/pm2" /usr/local/bin/pm2

# Working directory and copy app files (actual app mounts later)
WORKDIR /var/www/

# Setup a bashrc for www-data
RUN cp /etc/skel/.bashrc /var/www/.bashrc

# Add site directory
RUN mkdir ${SITE_PATH}

# Create writable dirs
RUN mkdir -p ${SITE_PATH}/storage ${SITE_PATH}/bootstrap/cache ${LOGS_FOLDER} && \
  chown -R www-data:www-data ${SITE_PATH}/storage ${SITE_PATH}/bootstrap/cache ${LOGS_FOLDER} && \
  chmod -R ug+rw ${SITE_PATH}/storage ${SITE_PATH}/bootstrap/cache ${LOGS_FOLDER}

# ls the ${SITE_PATH} dir so i can see if it worked
RUN ls -la ${SITE_PATH}

# Copy precomputed config files into the container
COPY php.custom.ini /usr/local/etc/php/conf.d/99-upload.ini
COPY xdebug.custom.ini /usr/local/etc/php/conf.d/99-xdebug.ini
COPY Caddyfile /etc/caddy/Caddyfile
COPY ecosystem.config.js /var/www/ecosystem.config.js

# Adjust UID for host match (optional)
RUN usermod -u 1000 www-data

# Set ownership on working dir
RUN chown -R www-data:www-data /var/www/

USER www-data

RUN git config --global --add safe.directory /var/www/site

# Run pm2 start if ecosystem file exists
ENV USE_PM2=${USE_PM2}
RUN if [ -f ${SITE_PATH}/ecosystem.config.js && USE_PM2 == "true" ]; then \
  pm2 start ${SITE_PATH}/ecosystem.config.js; \
  fi

EXPOSE 80

ENV FRANKENPHP_CONFIG=unix//run/frankenphp.sock

CMD ["frankenphp", "run", "--config", "/etc/caddy/Caddyfile"]


